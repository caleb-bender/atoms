using CalebBender.Atoms.Exceptions;
using CalebBender.Atoms.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CalebBender.Atoms.Repositories.Factories
{
    /// <summary>
    /// A stateless factory used to obtain an abstracted IAtomicRepository, but will validate that
    /// both the connection string and TModel are valid before returning it.
    /// </summary>
    /// <typeparam name="TModel">The data mode class</typeparam>
    public interface IAtomicRepositoryFactory<TModel> where TModel : class, new()
	{
        /// <summary>
        /// Attempts to create an IAtomicRepository implementation given TModel and the dbConnectionString
        /// </summary>
        /// <param name="dbConnectionString"></param>
        /// <returns>The instantiated IAtomicRepository implementation</returns>
        /// <exception cref="AtomsConnectionException" />
        /// <exception cref="AutoGeneratedUniqueIdMustBeAnIntegerTypeException" />
        /// <exception cref="MissingUniqueIdAttributeException" />
        /// <exception cref="PropertyTypeIsIncompatibleWithUniqueIdAttributeException" />
        /// <exception cref="TooManyAutoGeneratedUniqueIdsException" />
        IAtomicRepository<TModel> CreateRepository(string dbConnectionString);
    }
}
