using CalebBender.Atoms.DataAttributes;
using CalebBender.Atoms.Exceptions;
using CalebBender.Atoms.Utils;
using System.Data.SqlClient;
using System.Reflection;

namespace CalebBender.Atoms.Repositories.Factories
{
    public class SqlServerAtomicRepositoryFactory<TModel> : AtomicRepositoryFactory<TModel>
		where TModel : class, new()
	{
		protected override IAtomicRepository<TModel> NewAtomicRepositoryResult(string connectionString)
		{
			return new SqlServer.SqlServerAtomicRepository<TModel>(connectionString);
		}
		protected override void AttemptToConnectAndOpen(string connectionString)
        {
			try
			{
				using SqlConnection connection = new SqlConnection(connectionString);
				connection.Open();
			}
			catch (Exception err)
			{
				throw new AtomsConnectionException("The connection to the database could not be established.", err);
			}
        }
		protected override void AssertThatAutoGeneratedIdOrIdsAreValid(IEnumerable<PropertyInfo> autoGeneratedIdProperties)
		{
			if (autoGeneratedIdProperties.Count() == 0) return;
			if (autoGeneratedIdProperties.Count() > 1)
				throw new TooManyAutoGeneratedUniqueIdsException($"The model \"{typeof(TModel).Name}\" can only have one property annotated with [UniqueId(AutoGenerated = true)] because SQL Server only allows for one identity column per table.");
			var autoGeneratedIdProperty = autoGeneratedIdProperties.First();
			if (IsNotIntegerType(autoGeneratedIdProperty))
				throw new AutoGeneratedUniqueIdMustBeAnIntegerTypeException($"The model \"{typeof(TModel).Name}\" cannot have a non-integer property annotated with [UniqueId(AutoGenerated = true)] because SQL Server only allows integer columns to be used as identity columns.");
		}

		private bool IsNotIntegerType(PropertyInfo autoGeneratedIdProperty)
		{
			Type propertyType = autoGeneratedIdProperty.PropertyType;
			return propertyType != typeof(byte) && propertyType != typeof(short) &&
				propertyType != typeof(int) && propertyType != typeof(long);
		}
	}
}
