using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CalebBender.Atoms.Repositories.SqlServer;

namespace CalebBender.Atoms.Repositories.SqlServer.SqlGeneration
{
	internal static class UpdateSqlGenerator<TModel> where TModel : class, new()
	{
		private static readonly Type modelType = typeof(TModel);

		internal static (string, IEnumerable<SqlParameter>) GetUpdateSqlTextAndParameters(
			IEnumerable<TModel> models
		)
		{
			string updateSqlText = "";
			var updateParameters = new List<SqlParameter>();
			int modelNumber = 0;
			foreach ( var model in models )
			{
				var tableName = ModelMetadata<TModel>.TableName;
				updateSqlText += $"UPDATE [{tableName}] SET ";
				var numberOfPublicProperties = ModelMetadata<TModel>.PublicProperties.Count();
				for (int i = 0; i < numberOfPublicProperties; i++)
				{
					var property = ModelMetadata<TModel>.PublicProperties.ElementAt(i);
					var propertyName = ModelMetadata<TModel>.GetDatabasePropertyName(property);
					if (!InsertSqlGenerator<TModel>.PropertyIsAutoGeneratedUniqueId(property))
					{
						updateSqlText += "[" + propertyName + "]" + " = @" + propertyName + modelNumber;
						if (i != numberOfPublicProperties - 1)
							updateSqlText+= ", ";
					}
					var propertyValue = PropertyMappingUtilities<TModel>.GetModelPropertyDatabaseValue(property, model); // property.GetValue(model);
					updateParameters.Add(new SqlParameter("@" + propertyName + modelNumber, propertyValue ?? DBNull.Value));
				}
				updateSqlText += GetWhereClauseText(modelNumber++) + "; ";
			}
			return (updateSqlText, updateParameters);
		}

		internal static string GetWhereClauseText(int modelNumber)
		{
			var whereClause = " WHERE ";
			for (int i = 0; i < ModelMetadata<TModel>.UniqueIdPublicProperties.Count(); i++)
			{
				var property = ModelMetadata<TModel>.UniqueIdPublicProperties.ElementAt(i);
				string propertyName = ModelMetadata<TModel>.GetDatabasePropertyName(property);
				whereClause += $"[{propertyName}] = @{propertyName}{modelNumber}";
				if (i != ModelMetadata<TModel>.UniqueIdPublicProperties.Count() - 1)
					whereClause += " AND ";
			}
			return whereClause;
		}


	}
}
